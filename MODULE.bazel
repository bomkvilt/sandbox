"""
TODO: add something to manage dependency versions.
HINT: from `hedron_compile_commands`:
    Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
"""

module(name="sandbox")

# ----------------------------------------------------------
# rules_cc
# ----------------------------------------------------------

bazel_dep(name="rules_cc", version="0.0.17")

# ----------------------------------------------------------
# feature: LLVM / C++
# ----------------------------------------------------------

bazel_dep(name="toolchains_llvm", version="1.2.0")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency=True)
llvm.toolchain(
    name="llvm_toolchain",
    llvm_versions={"": "19.1.0"},  # NOTE: windows version should be installed by hands
    cxx_standard={"": "c++23"},
)

# NOTE: does not work for Windows https://github.com/bazel-contrib/toolchains_llvm/pull/342
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")
register_toolchains("@llvm_toolchain//:all")

# ============================
# block: windows: building with clang-cl
# https://bazel.build/configure/windows#clang

# TODO: rid of the crutch after toolchains_llvm windows support enabled

# Required only for the `@local_config_cc//:cc-toolchain-x64_windows-clang-cl`
# bazel_dep(name="platforms", version="0.0.11")

# Required only for the `@local_config_cc//:cc-toolchain-x64_windows-clang-cl`
# cc_configure = use_extension("@rules_cc//cc:extensions.bzl", "cc_configure_extension")
# use_repo(cc_configure, "local_config_cc")

# register_execution_platforms(
#     "//:x64_windows-clang-cl"
# )

# register_toolchains(
#     "@local_config_cc//:cc-toolchain-x64_windows-clang-cl",
# )

# block: done
# ============================

# ----------------------------------------------------------
# feature: Rust
# ----------------------------------------------------------

bazel_dep(name="rules_rust", version="0.56.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition="2021", versions=["1.84.0"])
use_repo(rust, "rust_toolchains")

# SA: https://bazelbuild.github.io/rules_rust/crate_universe_bzlmod.html
crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        # NOTE: list all the rust modules
        # NOTE: should also be mentioned at the `./Cargo.toml`
        "//rust/basics/00.hellow_world:Cargo.toml",
        "//rust/concepts/comp_for_macro:Cargo.toml",
        "//rust/concepts/umbra_strings:Cargo.toml",
        "//rust/projects/massive_gravity_v1:Cargo.toml"
    ],
)
use_repo(crate, "crates")

# ----------------------------------------------------------
# setup external c++ packages from Conan
# ----------------------------------------------------------

load_conan_dependencies = use_extension(
    "//build/conan:conan_deps_module_extension.bzl",
    "conan_extension"
)
use_repo(load_conan_dependencies, "asio", "gtest", "benchmark")

# ----------------------------------------------------------
# extract build commmands (clangd & co.)
# ----------------------------------------------------------

bazel_dep(name="hedron_compile_commands", dev_dependency=True)
git_override(
    module_name="hedron_compile_commands",
    remote="https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit="1e08f8e0507b6b6b1f4416a9a22cf5c28beaba93",
)

# ----------------------------------------------------------
# external libraries
# ----------------------------------------------------------

bazel_dep(name="google_benchmark", version="1.9.1")
